////
/// @group o-loading
/// @link http://registry.origami.ft.com/components/o-loading
////

/// Output the keyframe animation definition
///
/// @private
@mixin _oLoadingAnimationKeyframes {
	@at-root {
		@if not $o-loading-animation-keyframes {
			@keyframes o-loading-spinner {
				0% {
					transform: rotate(0deg);
				}
				100% {
					transform: rotate(360deg);
				}
			}

			$o-loading-animation-keyframes: true !global;
		}
	}
}

/// Color variation for a loading indicator
///
/// @param {String|Color} $color
/// @access private
@mixin _oLoadingColor($color) {
	@if type-of($color) == 'string' {
		$color: map-get($o-loading-colors, $color);

		@if not $color {
			@warn "Color: '#{$color}' not found for o-loading";
		}
	}

	border: 4px solid rgba($color, 0.25);
	border-top-color: $color;
}

/// Size variation for a loading indicator
///
/// @param {String|Number} $size
/// @access private
@mixin _oLoadingSize($size) {
	@if type-of($size) == 'string' {
		$size: map-get($o-loading-sizes, $size);

		@if not $size {
			@warn "Size: '#{$size}' not found for o-loading";
		}
	}

	width: $size;
	height: $size;
}

@mixin oLoadingContent($opts: (
	'color': null,
	'size': null
)) {
	$color: map-get($opts, 'color');
	$size: map-get($opts, 'size');

	@at-root {
		@include _oLoadingAnimationKeyframes();
	}

	// HACK: creates a new selector to output the rules _after_ keyframes
	& {
		display: inline-block;
		border-radius: 50%;
		animation: o-loading-spinner 1s infinite linear;
	}

	@if $color {
		@include _oLoadingColor($color);
	}

	@if $size {
		@include _oLoadingSize($size);
	}
}
